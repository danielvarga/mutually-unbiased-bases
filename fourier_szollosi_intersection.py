import re
import numpy as np

from base import *


mathematica_string = '''
{{{1, -0.99099 - 0.133934 I, -0.99099 - 0.133934 I,
   0.654654 + 0.755929 I, 0.197822 + 0.980238 I,
   0.197822 + 0.980238 I}, {1, -0.861485 - 0.507782 I,
   0.870495 - 0.492177 I, -0.654654 - 0.755929 I,
   0.197822 - 0.980238 I,
   0.75 + 0.661438 I}, {1, -0.00900961 + 0.999959 I, -0.00900961 +
    0.999959 I, -0.654654 - 0.755929 I, -0.947822 +
    0.3188 I, -0.947822 + 0.3188 I}, {1, 0.379505 + 0.92519 I,
   0.611485 - 0.791256 I, 0.654654 + 0.755929 I,
   0.75 - 0.661438 I, -0.947822 - 0.3188 I}, {1,
   0.611485 - 0.791256 I, 0.379505 + 0.92519 I,
   0.654654 + 0.755929 I, -0.947822 - 0.3188 I,
   0.75 - 0.661438 I}, {1,
   0.870495 - 0.492177 I, -0.861485 - 0.507782 I, -0.654654 -
    0.755929 I, 0.75 + 0.661438 I,
   0.197822 - 0.980238 I}}, {{1, -0.99099 - 0.133934 I, -0.5 -
    0.866025 I, 0.327327 - 0.944911 I,
   0.75 - 0.661438 I, -0.98198 + 0.188982 I}, {1, -0.861486 -
    0.507782 I, -0.5 + 0.866026 I, -0.327326 +
    0.944911 I, -0.947822 + 0.318801 I, -0.654654 -
    0.755929 I}, {1, -0.00900929 + 0.999959 I, -0.5 -
    0.866025 I, -0.327326 + 0.944911 I, 0.75 + 0.661437 I,
   0.98198 - 0.188983 I}, {1, 0.379505 + 0.92519 I,
   1. - 1.7917*10^-7 I, 0.327327 - 0.944911 I, -0.947822 - 0.3188 I,
   0.327327 - 0.944911 I}, {1,
   0.611485 - 0.791256 I, -0.5 + 0.866026 I, 0.327327 - 0.944911 I,
   0.197822 + 0.980238 I, 0.654654 + 0.755929 I}, {1,
   0.870495 - 0.492177 I, 1. - 3.1258*10^-7 I, -0.327327 + 0.944911 I,
    0.197822 - 0.980238 I, -0.327327 + 0.944911 I}}, {{1, -0.99099 +
    0.133934 I,
   1. - 2.38*10^-7 I, -0.327327 - 0.944911 I, -0.75 -
    0.661438 I, -0.327327 - 0.944911 I}, {1, -0.861485 +
    0.507783 I, -0.5 + 0.866026 I, 0.327327 + 0.944911 I,
   0.947822 + 0.3188 I, -0.981981 - 0.188982 I}, {1, -0.00900999 -
    0.999959 I, 1. - 2.40241*10^-7 I,
   0.327327 + 0.944911 I, -0.75 + 0.661438 I,
   0.327327 + 0.944911 I}, {1,
   0.379505 - 0.92519 I, -0.5 - 0.866025 I, -0.327327 - 0.944911 I,
   0.947822 - 0.3188 I, -0.654654 + 0.755929 I}, {1,
   0.611486 + 0.791256 I, -0.5 + 0.866026 I, -0.327327 -
    0.944911 I, -0.197822 + 0.980238 I, 0.981981 + 0.188982 I}, {1,
   0.870495 + 0.492177 I, -0.5 - 0.866025 I,
   0.327327 + 0.944911 I, -0.197822 - 0.980238 I,
   0.654654 - 0.755929 I}}, {{1, -0.99099 + 0.133934 I,
   0.611486 + 0.791256 I, -0.654654 + 0.755929 I, -0.197822 +
    0.980238 I,
   0.947822 - 0.3188 I}, {1, -0.861485 + 0.507782 I, -0.00900987 -
    0.999959 I, 0.654654 - 0.755929 I, -0.197822 - 0.980238 I,
   0.947822 + 0.3188 I}, {1, -0.00900996 - 0.999959 I, -0.861485 +
    0.507783 I, 0.654654 - 0.755929 I,
   0.947822 + 0.3188 I, -0.197822 - 0.980238 I}, {1,
   0.379505 - 0.92519 I,
   0.379505 - 0.92519 I, -0.654654 + 0.755929 I, -0.75 -
    0.661438 I, -0.75 - 0.661438 I}, {1,
   0.611486 + 0.791256 I, -0.99099 + 0.133934 I, -0.654653 +
    0.755929 I, 0.947822 - 0.3188 I, -0.197822 + 0.980238 I}, {1,
   0.870495 + 0.492177 I, 0.870495 + 0.492177 I,
   0.654654 - 0.755929 I, -0.75 + 0.661438 I, -0.75 +
    0.661438 I}}, {{1, -0.501373 - 0.865231 I, -0.501029 - 0.865431 I,
    0.00437622 + 0.99999 I, 0.866797 - 0.498662 I,
   0.866054 - 0.49995 I}, {1, -0.500171 + 0.865927 I,
   1. - 0.000060186 I, -0.000213604 + 1.0 I, -0.866284 -
    0.499552 I, -0.000443235 + 1. I}, {1, -0.497627 -
    0.867391 I, -0.497055 - 0.867719 I,
   0.00259283 - 0.999997 I, -0.866954 + 0.498389 I, -0.866865 +
    0.498542 I}, {1, -0.491501 + 0.870877 I,
   0.999996 - 0.00273775 I, -0.00529331 - 0.999986 I,
   0.867358 + 0.497685 I, -0.00455978 - 0.99999 I}, {1,
   1. - 0.000791728 I, -0.500632 + 0.86566 I,
   0.0000976272 + 1. I, -0.00285608 + 0.999996 I, -0.867432 -
    0.497555 I}, {1, 1. - 0.000406307 I, -0.500881 + 0.865516 I,
   0.000258385 - 1. I, 0.000367261 - 1. I,
   0.866033 + 0.499988 I}}, {{1, -0.500003 - 0.866024 I, -0.990991 -
    0.133931 I, 0.327324 - 0.944912 I, -0.98198 + 0.188983 I,
   0.749998 - 0.66144 I}, {1, -0.500001 - 0.866025 I, -0.00900924 +
    0.999959 I, -0.327326 + 0.944911 I, 0.98198 - 0.188983 I,
   0.75 + 0.661437 I}, {1, -0.5 + 0.866025 I, -0.861485 -
    0.507782 I, -0.327327 + 0.944911 I, -0.654654 -
    0.755929 I, -0.947822 + 0.3188 I}, {1, -0.5 + 0.866026 I,
   0.611485 - 0.791256 I, 0.327327 - 0.944911 I,
   0.654654 + 0.755929 I, 0.197822 + 0.980238 I}, {1,
   1. - 4.6318*10^-7 I,
   0.870495 - 0.492177 I, -0.327326 + 0.944911 I, -0.327327 +
    0.944911 I, 0.197822 - 0.980238 I}, {1, 1. + 1.0726*10^-8 I,
   0.379505 + 0.92519 I, 0.327327 - 0.944911 I,
   0.327327 - 0.944911 I, -0.947822 - 0.3188 I}}, {{1, -0.500001 -
    0.866025 I, 0.870496 + 0.492176 I, 0.327328 + 0.944911 I,
   0.654653 - 0.755929 I, -0.197823 - 0.980238 I}, {1, -0.5 -
    0.866025 I,
   0.379505 - 0.92519 I, -0.327327 - 0.944911 I, -0.654654 +
    0.755929 I, 0.947822 - 0.3188 I}, {1, -0.5 + 0.866026 I,
   0.611486 + 0.791256 I, -0.327327 - 0.944911 I,
   0.981981 + 0.188982 I, -0.197822 + 0.980238 I}, {1, -0.5 +
    0.866026 I, -0.861485 + 0.507783 I,
   0.327327 + 0.944911 I, -0.981981 - 0.188982 I,
   0.947822 + 0.3188 I}, {1,
   1. + 1.97746*10^-8 I, -0.00900973 - 0.999959 I,
   0.327327 + 0.944911 I,
   0.327327 + 0.944911 I, -0.75 + 0.661438 I}, {1,
   1. + 8.86948*10^-9 I, -0.99099 + 0.133934 I, -0.327327 -
    0.944911 I, -0.327327 - 0.944911 I, -0.75 - 0.661438 I}}}
'''

def convert(mathematica_string):
    # Simple brute-force conversion
    python_string = (
        mathematica_string
        .replace('I', '*1j')    # Convert Mathematica's I to Python's j
        .replace('{', '[')
        .replace('}', ']')
        .replace('^', 'e')
    )

    # Evaluate and convert to numpy array
    np_array = np.array(eval(python_string), dtype=np.complex128)
    return np_array


fs = convert(mathematica_string)

mathematica_string_sz = '''
{{{1., 1., 1., 1., 1.,
  1.}, {1., -0.5 + 0.866025 I, -0.5 + 0.866025 I, -1.,
  0.5 - 0.866025 I,
  0.5 - 0.866025 I}, {1., -0.5 + 0.866025 I, -0.5 - 0.866025 I,
  1., -0.5 + 0.866025 I, -0.5 - 0.866025 I}, {1., -0.5 - 0.866025 I,
  1., -1., 0.5 + 0.866025 I, -1.}, {1., -0.5 - 0.866025 I, -0.5 +
   0.866025 I, 1., -0.5 - 0.866025 I, -0.5 + 0.866025 I}, {1.,
  1., -0.5 - 0.866025 I, -1., -1., 0.5 + 0.866025 I}}}
'''

sz = convert(mathematica_string_sz)[0]
print(sz.shape, fs.shape)

def gently_verify_unbiased(b1, b2, atol=1e-4):
    n = len(b1)
    prod = trans(b1, b2)
    print(np.around(np.abs(prod * n ** -0.5), 5))

np.set_printoptions(precision=4, suppress=True, linewidth=100000)
for f in fs:
    t = trans(f / 6 ** 0.5, sz / 6 ** 0.5)
    print(angler(dephase(t))) ; continue

    f = dephase(f)
    print(angler(f))
    print("------")
    continue

    ie = is_equivalent(sz, f.T)
    print(ie)
    continue
    bs = find_partitions(f.T)
    print(bs)
    continue

    a = np.stack([6 ** 0.5 * np.eye(6, dtype=np.complex128), f.T, sz.T], axis=0)
    a /= 6 ** 0.5

    for i in range(len(a)):
        for j in range(i + 1, len(a)):
            verify_unbiased(a[i], a[j], atol=1e-4)

    c = hadamard_cube(a)
    print(angler(dephase(c[0, :, :])))
    continue
    print("------")
    print(np.abs(c))
    print("------")
    verify_cube_properties(c)
